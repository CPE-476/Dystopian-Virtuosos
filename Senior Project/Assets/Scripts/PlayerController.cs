//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Rhythm Map"",
            ""id"": ""d04e47dc-91b9-4b8e-b985-0d932202d043"",
            ""actions"": [
                {
                    ""name"": ""Top"",
                    ""type"": ""Button"",
                    ""id"": ""c1bdb343-6ba8-4b1b-9dc0-fe1b60116419"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MidTop"",
                    ""type"": ""Button"",
                    ""id"": ""f07024cb-532e-418b-af50-d18700f6b4a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MidBottom"",
                    ""type"": ""Button"",
                    ""id"": ""af5eb13a-387b-4d25-82ae-93955f7abc29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bottom"",
                    ""type"": ""Button"",
                    ""id"": ""eb2600ca-df52-4985-a118-7945f09d32ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ccc473dd-9329-4df5-98a7-a93c43a10544"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47e3ff26-c7f9-4f2f-a6b2-4cf3b644e27c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MidTop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81e4a9ac-696d-4c06-a373-a87797fed17e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MidBottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ec208d8-7d39-44e3-9077-9dd13135e90e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rhythm Map
        m_RhythmMap = asset.FindActionMap("Rhythm Map", throwIfNotFound: true);
        m_RhythmMap_Top = m_RhythmMap.FindAction("Top", throwIfNotFound: true);
        m_RhythmMap_MidTop = m_RhythmMap.FindAction("MidTop", throwIfNotFound: true);
        m_RhythmMap_MidBottom = m_RhythmMap.FindAction("MidBottom", throwIfNotFound: true);
        m_RhythmMap_Bottom = m_RhythmMap.FindAction("Bottom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rhythm Map
    private readonly InputActionMap m_RhythmMap;
    private IRhythmMapActions m_RhythmMapActionsCallbackInterface;
    private readonly InputAction m_RhythmMap_Top;
    private readonly InputAction m_RhythmMap_MidTop;
    private readonly InputAction m_RhythmMap_MidBottom;
    private readonly InputAction m_RhythmMap_Bottom;
    public struct RhythmMapActions
    {
        private @PlayerController m_Wrapper;
        public RhythmMapActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Top => m_Wrapper.m_RhythmMap_Top;
        public InputAction @MidTop => m_Wrapper.m_RhythmMap_MidTop;
        public InputAction @MidBottom => m_Wrapper.m_RhythmMap_MidBottom;
        public InputAction @Bottom => m_Wrapper.m_RhythmMap_Bottom;
        public InputActionMap Get() { return m_Wrapper.m_RhythmMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RhythmMapActions set) { return set.Get(); }
        public void SetCallbacks(IRhythmMapActions instance)
        {
            if (m_Wrapper.m_RhythmMapActionsCallbackInterface != null)
            {
                @Top.started -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnTop;
                @Top.performed -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnTop;
                @Top.canceled -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnTop;
                @MidTop.started -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnMidTop;
                @MidTop.performed -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnMidTop;
                @MidTop.canceled -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnMidTop;
                @MidBottom.started -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnMidBottom;
                @MidBottom.performed -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnMidBottom;
                @MidBottom.canceled -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnMidBottom;
                @Bottom.started -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnBottom;
                @Bottom.performed -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnBottom;
                @Bottom.canceled -= m_Wrapper.m_RhythmMapActionsCallbackInterface.OnBottom;
            }
            m_Wrapper.m_RhythmMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Top.started += instance.OnTop;
                @Top.performed += instance.OnTop;
                @Top.canceled += instance.OnTop;
                @MidTop.started += instance.OnMidTop;
                @MidTop.performed += instance.OnMidTop;
                @MidTop.canceled += instance.OnMidTop;
                @MidBottom.started += instance.OnMidBottom;
                @MidBottom.performed += instance.OnMidBottom;
                @MidBottom.canceled += instance.OnMidBottom;
                @Bottom.started += instance.OnBottom;
                @Bottom.performed += instance.OnBottom;
                @Bottom.canceled += instance.OnBottom;
            }
        }
    }
    public RhythmMapActions @RhythmMap => new RhythmMapActions(this);
    public interface IRhythmMapActions
    {
        void OnTop(InputAction.CallbackContext context);
        void OnMidTop(InputAction.CallbackContext context);
        void OnMidBottom(InputAction.CallbackContext context);
        void OnBottom(InputAction.CallbackContext context);
    }
}
